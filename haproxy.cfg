global
	# to have these messages end up in /var/log/haproxy.log you will
	# need to:
	#
	# 1) configure syslog to accept network log events.  This is done
	#    by adding the '-r' option to the SYSLOGD_OPTIONS in
	#    /etc/sysconfig/syslog
	#
	# 2) configure local2 events to go to the /var/log/haproxy.log
	#   file. A line like the following can be added to
	#   /etc/sysconfig/syslog
	#
	#    local2.*                       /var/log/haproxy.log
	#
	log         127.0.0.1 local2

	chroot      /var/lib/haproxy
	pidfile     /var/run/haproxy.pid
	maxconn     4000
	user        haproxy
	group       haproxy
	daemon

	# turn on stats unix socket
	stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
	mode http
	log global
	log-format [%pid]\ [%Ts.%ms]\ %ac/%fc/%bc/%bq/%sc/%sq/%rc\ %Tq/%Tw/%Tc/%Tr/%Tt\ %tsc\ %ci:%cp\ %fi:%fp\ %si:%sp\ %ft\ %sslc\ %sslv\ %{+Q}r\ %ST\ %b:%s\ %ID\ %CC\ %hr\ %CS\ %hs\ %B\ bytes
	no option dontlognull
	option http-keep-alive
	option forwardfor except 127.0.0.0/8
	option redispatch
	retries 3
	# disconnect slow handshake clients early, protect from
	# resources exhaustion attacks
	timeout http-request    5s
	timeout queue           1m
	timeout connect         5s
	timeout client          1m
	timeout server          1m
	timeout http-keep-alive 10s
	timeout check           10s
	maxconn                 100000

# frontend used to return health status without requiring SSL
frontend haproxy_status
	bind 0.0.0.0:34180	# 34180 means EALTH ;)
	# create a status URI in /haproxy_status that will return
	# a 200 is backend is healthy, and 503 if it isn't. This 
	# URI is queried by the ELB.
	acl backend_dead nbsrv(fxa-nodejs) lt 1
	monitor-uri /haproxy_status
	monitor fail if backend_dead

	# reject non status requests
	acl status_req path /haproxy_status
	tcp-request content reject if ! status_req

# main frontend with SSL and PROXY protocol
frontend fxa-https
	bind 0.0.0.0:443 accept-proxy ssl crt /etc/haproxy/bundle.pem ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK

	# Insert a unique request identifier is the headers of the request
	# passed to the backend
	unique-id-format %{+X}o\ %ci:%cp_%fi:%fp_%Ts_%rt:%pid
	unique-id-header X-Unique-ID

	# Headers and Cookies to log
	capture request header Referrer len 64
	capture request header User-Agent len 64

	# Requests validation using ACLs ---
	acl valid-get path -f /etc/haproxy/get_endpoints.lst
	acl valid-post path -f /etc/haproxy/post_endpoints.lst

	# block requests that don't match the predefined endpoints
	block unless METH_GET valid-get or METH_POST valid-post

	# block requests on verify_email that do not have the correct params
	acl endpoint-verify_email path /verify_email
	acl param-code urlp_reg(code) [0-9a-fA-F]{32}
	acl param-uid urlp_reg(uid) [0-9a-fA-F]{64}
	block if endpoint-verify_email !param-code or endpoint-verify_email !param-uid

	# DDoS protection: 
	# HAproxy tracks client IPs into a global stick table. Each IP is
	# stored for a limited amount of time, with several counters attached
	# to it. When a new connection comes in, the stick table is evaluated
	# to verify that the new connection from this client is allowed to
	# continue.

	# enable tracking of counters for src ip in the default stick-table
	tcp-request content track-sc0 src

	# Stick Table Definitions
	# this table store up to 50,000 IPs that expire after 30 seconds
	# with each IP, additional counters are stored
	#  - conn_cur: count active connections
	stick-table type ip size 50k expire 30s store conn_cur
	#  - conn_rate(10s): average incoming connection rate over 10 seconds
	stick-table type ip size 50k expire 30s store conn_rate(10s)
	#  - gpc0,http_req_rate(10s): Monitors the number of request sent by an
	#                             IP over a period of 10 seconds
	#  - gpc1,http_err_rate(10s): Monitors the number of errors generated by
	#                             an IP over a period of 10 seconds
	stick-table type ip size 50k expire 30s store gpc0,http_req_rate(10s),http_err_rate(10s)

	# maximum allowed time to wait for data during tcp content inspection
	tcp-request inspect-delay 10s

	# TCP Whitelist: Allow known IPs to bypass the filter
	tcp-request content accept if { src -f /etc/haproxy/whitelist.lst }

	# TCP Blacklist: Deny known IPs to continue
	tcp-request content accept if { src -f /etc/haproxy/blacklist.lst }

	# Reject the new connection if the client already has 10 opened
	#tcp-request content reject if { src_conn_cur ge 10 }

	# Limit connection rate per user
	# Reject the new connection if the client has opened more than 50 connections in 10 seconds
	#tcp-request content reject if { src_conn_rate ge 50 }

	# Limit HTTP request & error rates
	# Reject the connection if the client has passed the HTTP rates stored in gpc0
	#tcp-request content reject if { src_get_gpc0 gt 0 }

	# If the source IP sent 120 or more http request over the defined period,
	acl http_abuse_rate src_http_req_rate(fxa-https) ge 120
	# flag the IP as abuser on the frontend
	#acl flag_abuser src_inc_gpc0(https)
	#tcp-request content reject if http_abuse_rate and flag_abuser
	tcp-request content reject if http_abuse_rate

	default_backend fxa-nodejs

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend fxa-nodejs
	balance roundrobin
	server nodejs1 localhost:8000 check
